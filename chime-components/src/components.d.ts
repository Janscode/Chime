/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ChimeButtonGroup {
        /**
          * @prop boxes: Control the number of buttons within the group. Using an odd number is highly recommended.
          * @default 5
         */
        "boxes": number;
        /**
          * @prop highLabel: An optional label that will be placed near  the upper button.
         */
        "highLabel": string;
        /**
          * @prop lowLabel: An optional label that will be placed near  the lower button.
         */
        "lowLabel": string;
        /**
          * @prop midLabel: An optional label that will be placed near the middle button. Only works for odd numbers of buttons.
         */
        "midLabel": string;
    }
    interface ChimeGmailTooltip {
        /**
          * @prop companyImage - path to the company's logo
         */
        "companyImage": string | null;
        /**
          * @prop position - object that takes a top and right value that will position the tooltip based on the tip being (0, 0)
         */
        "position": {top: string, right: string};
        /**
          * @prop question - the question being asked
         */
        "question": string;
        /**
          * @prop questionOriginator - entity who asked the question
         */
        "questioner": string | null;
    }
    interface ChimeMulti {
        "choices": string[] | string;
        "type": string;
    }
    interface ChimeSubmitButton {
    }
    interface ChimeTextArea {
    }
    interface ChimeUniversal {
        /**
          * @prop companyImage - path to the company's logo
         */
        "companyImage": string | null;
        /**
          * @prop question - the question being asked
         */
        "question": string;
        /**
          * @prop questionOriginator - entity who asked the question
         */
        "questioner": string | null;
    }
}
declare global {
    interface HTMLChimeButtonGroupElement extends Components.ChimeButtonGroup, HTMLStencilElement {
    }
    var HTMLChimeButtonGroupElement: {
        prototype: HTMLChimeButtonGroupElement;
        new (): HTMLChimeButtonGroupElement;
    };
    interface HTMLChimeGmailTooltipElement extends Components.ChimeGmailTooltip, HTMLStencilElement {
    }
    var HTMLChimeGmailTooltipElement: {
        prototype: HTMLChimeGmailTooltipElement;
        new (): HTMLChimeGmailTooltipElement;
    };
    interface HTMLChimeMultiElement extends Components.ChimeMulti, HTMLStencilElement {
    }
    var HTMLChimeMultiElement: {
        prototype: HTMLChimeMultiElement;
        new (): HTMLChimeMultiElement;
    };
    interface HTMLChimeSubmitButtonElement extends Components.ChimeSubmitButton, HTMLStencilElement {
    }
    var HTMLChimeSubmitButtonElement: {
        prototype: HTMLChimeSubmitButtonElement;
        new (): HTMLChimeSubmitButtonElement;
    };
    interface HTMLChimeTextAreaElement extends Components.ChimeTextArea, HTMLStencilElement {
    }
    var HTMLChimeTextAreaElement: {
        prototype: HTMLChimeTextAreaElement;
        new (): HTMLChimeTextAreaElement;
    };
    interface HTMLChimeUniversalElement extends Components.ChimeUniversal, HTMLStencilElement {
    }
    var HTMLChimeUniversalElement: {
        prototype: HTMLChimeUniversalElement;
        new (): HTMLChimeUniversalElement;
    };
    interface HTMLElementTagNameMap {
        "chime-button-group": HTMLChimeButtonGroupElement;
        "chime-gmail-tooltip": HTMLChimeGmailTooltipElement;
        "chime-multi": HTMLChimeMultiElement;
        "chime-submit-button": HTMLChimeSubmitButtonElement;
        "chime-text-area": HTMLChimeTextAreaElement;
        "chime-universal": HTMLChimeUniversalElement;
    }
}
declare namespace LocalJSX {
    interface ChimeButtonGroup {
        /**
          * @prop boxes: Control the number of buttons within the group. Using an odd number is highly recommended.
          * @default 5
         */
        "boxes"?: number;
        /**
          * @prop highLabel: An optional label that will be placed near  the upper button.
         */
        "highLabel"?: string;
        /**
          * @prop lowLabel: An optional label that will be placed near  the lower button.
         */
        "lowLabel"?: string;
        /**
          * @prop midLabel: An optional label that will be placed near the middle button. Only works for odd numbers of buttons.
         */
        "midLabel"?: string;
        "onValueChange"?: (event: CustomEvent<String>) => void;
    }
    interface ChimeGmailTooltip {
        /**
          * @prop companyImage - path to the company's logo
         */
        "companyImage"?: string | null;
        /**
          * @prop position - object that takes a top and right value that will position the tooltip based on the tip being (0, 0)
         */
        "position"?: {top: string, right: string};
        /**
          * @prop question - the question being asked
         */
        "question"?: string;
        /**
          * @prop questionOriginator - entity who asked the question
         */
        "questioner"?: string | null;
    }
    interface ChimeMulti {
        "choices"?: string[] | string;
        "onValueChange"?: (event: CustomEvent<string[]>) => void;
        "type"?: string;
    }
    interface ChimeSubmitButton {
    }
    interface ChimeTextArea {
        "onValueChange"?: (event: CustomEvent<String>) => void;
    }
    interface ChimeUniversal {
        /**
          * @prop companyImage - path to the company's logo
         */
        "companyImage"?: string | null;
        "onDismissQuestion"?: (event: CustomEvent<String>) => void;
        "onSubmitQuestion"?: (event: CustomEvent<any>) => void;
        /**
          * @prop question - the question being asked
         */
        "question"?: string;
        /**
          * @prop questionOriginator - entity who asked the question
         */
        "questioner"?: string | null;
    }
    interface IntrinsicElements {
        "chime-button-group": ChimeButtonGroup;
        "chime-gmail-tooltip": ChimeGmailTooltip;
        "chime-multi": ChimeMulti;
        "chime-submit-button": ChimeSubmitButton;
        "chime-text-area": ChimeTextArea;
        "chime-universal": ChimeUniversal;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "chime-button-group": LocalJSX.ChimeButtonGroup & JSXBase.HTMLAttributes<HTMLChimeButtonGroupElement>;
            "chime-gmail-tooltip": LocalJSX.ChimeGmailTooltip & JSXBase.HTMLAttributes<HTMLChimeGmailTooltipElement>;
            "chime-multi": LocalJSX.ChimeMulti & JSXBase.HTMLAttributes<HTMLChimeMultiElement>;
            "chime-submit-button": LocalJSX.ChimeSubmitButton & JSXBase.HTMLAttributes<HTMLChimeSubmitButtonElement>;
            "chime-text-area": LocalJSX.ChimeTextArea & JSXBase.HTMLAttributes<HTMLChimeTextAreaElement>;
            "chime-universal": LocalJSX.ChimeUniversal & JSXBase.HTMLAttributes<HTMLChimeUniversalElement>;
        }
    }
}
